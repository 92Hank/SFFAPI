// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SFFAPI.Data;

namespace SFFAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("SFFAPI.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Genre")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("SFFAPI.Models.RentedMovie", b =>
                {
                    b.Property<int>("RentedMovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudioId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RentedMovieId");

                    b.HasIndex("MovieId");

                    b.HasIndex("StudioId");

                    b.ToTable("RentedMovies");
                });

            modelBuilder.Entity("SFFAPI.Models.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("SFFAPI.Models.Trivia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("StudioId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TriviaContext")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("StudioId");

                    b.ToTable("Trivias");
                });

            modelBuilder.Entity("SFFAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SFFAPI.Models.RentedMovie", b =>
                {
                    b.HasOne("SFFAPI.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SFFAPI.Models.Studio", null)
                        .WithMany("RentedMovies")
                        .HasForeignKey("StudioId");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("SFFAPI.Models.Trivia", b =>
                {
                    b.HasOne("SFFAPI.Models.Movie", "Movie")
                        .WithMany("Trivias")
                        .HasForeignKey("MovieId");

                    b.HasOne("SFFAPI.Models.Studio", "Studio")
                        .WithMany()
                        .HasForeignKey("StudioId");

                    b.Navigation("Movie");

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("SFFAPI.Models.Movie", b =>
                {
                    b.Navigation("Trivias");
                });

            modelBuilder.Entity("SFFAPI.Models.Studio", b =>
                {
                    b.Navigation("RentedMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
